---
- name: Define Talos node IP lists
  ansible.builtin.set_fact:
    control_plane_ips: "{{ range(start_octet, start_octet + (talos_cp_count | int)) | map('regex_replace', '^(.*)$', (gateway | regex_replace('\\.\\d+$', '')) ~ '.\\1') | list }}"
    worker_ips: "{{ range(start_octet + (talos_cp_count | int), start_octet + (talos_cp_count | int) + (talos_worker_count | int)) | map('regex_replace', '^(.*)$', (gateway | regex_replace('\\.\\d+$', '')) ~ '.\\1') | list }}"
    first_control_plane_ip: "{{ range(start_octet, start_octet + (talos_cp_count | int)) | map('regex_replace', '^(.*)$', (gateway | regex_replace('\\.\\d+$', '')) ~ '.\\1') | list | first }}"

- name: Check if cluster config file exists
  ansible.builtin.stat:
    path: "{{ talos_cluster_name }}/talosconfig"
  register: talosconfig_stat

- name: Check if the cluster is already bootstrapped
  ansible.builtin.command: "talosctl health --talosconfig={{ talos_cluster_name }}/talosconfig --nodes {{ first_control_plane_ip }}"
  register: cluster_health
  changed_when: false
  ignore_errors: true
  when: talosconfig_stat.stat.exists

- name: debug control_plane_ips
  ansible.builtin.debug:
    var: control_plane_ips

- name: debug worker_ips
  ansible.builtin.debug:
    var: worker_ips

- name: debug first_control_plane_ip
  ansible.builtin.debug:
    var: first_control_plane_ip

- name: Bootstrap the cluster if it is not already healthy
  block:
  - name: Assert required reproducible config inputs are set
    ansible.builtin.assert:
      that:
        - talos_version is defined
        - talos_version | length > 0
        - talos_kubernetes_version is defined
        - talos_kubernetes_version | length > 0
      fail_msg: "talos_version and talos_kubernetes_version are required for reproducible config generation"
    delegate_to: localhost

  - name: Ensure Talos output directory exists
    ansible.builtin.file:
      path: "{{ talos_cluster_name }}"
      state: directory
      mode: '0755'
    delegate_to: localhost

  - name: Check if secrets bundle exists
    ansible.builtin.stat:
      path: "{{ talos_cluster_name }}/secrets.yaml"
    register: talos_secrets_stat
    delegate_to: localhost

  - name: Generate Talos secrets bundle when missing
    ansible.builtin.command: >
      talosctl gen secrets
      --talos-version {{ talos_version }}
      -o {{ talos_cluster_name }}/secrets.yaml
    when: not talos_secrets_stat.stat.exists
    delegate_to: localhost

  - name: Render Talos VIP control-plane patch when enabled
    ansible.builtin.template:
      src: controlplane-vip-patch.yaml.j2
      dest: "{{ talos_cluster_name }}/controlplane-vip-patch.yaml"
    delegate_to: localhost
    when: vip_enabled and (vip_address | length) > 0

  - name: Generate Talos configuration files if they do not exist
    ansible.builtin.command: >
      talosctl gen config {{ talos_cluster_name }} https://{{ (vip_enabled and (vip_address | length) > 0) | ternary(vip_address, first_control_plane_ip) }}:6443
      --install-disk {{ talos_install_disk }}
      --with-secrets {{ talos_cluster_name }}/secrets.yaml
      --kubernetes-version {{ talos_kubernetes_version }}
      --talos-version {{ talos_version }}
      {% if vip_enabled and (vip_address | length) > 0 %}--config-patch-control-plane @{{ talos_cluster_name }}/controlplane-vip-patch.yaml{% endif %}
      --output-dir {{ talos_cluster_name }}
    args:
      creates: "{{ talos_cluster_name }}/controlplane.yaml"
    delegate_to: localhost

  - name: Wait for all control plane nodes to become available
    ansible.builtin.wait_for:
      host: "{{ item }}"
      port: 50000
      delay: 10
      timeout: 300
    loop: "{{ control_plane_ips }}"
    loop_control:
      loop_var: item

  - name: Apply config to all control plane nodes
    ansible.builtin.command: "talosctl apply-config --insecure --nodes {{ item }} --file {{ talos_cluster_name }}/controlplane.yaml"
    loop: "{{ control_plane_ips }}"
    loop_control:
      loop_var: item

  - name: Wait for all worker nodes to become available
    ansible.builtin.wait_for:
      host: "{{ item }}"
      port: 50000
      delay: 10
      timeout: 300
    loop: "{{ worker_ips }}"
    loop_control:
      loop_var: item

  - name: Apply config to all worker nodes
    ansible.builtin.command: "talosctl apply-config --insecure --nodes {{ item }} --file {{ talos_cluster_name }}/worker.yaml"
    loop: "{{ worker_ips }}"
    loop_control:
      loop_var: item

  - name: Remove generated controlplane.yaml to avoid storing final state
    ansible.builtin.file:
      path: "{{ talos_cluster_name }}/controlplane.yaml"
      state: absent
    delegate_to: localhost

  - name: Remove generated worker.yaml to avoid storing final state
    ansible.builtin.file:
      path: "{{ talos_cluster_name }}/worker.yaml"
      state: absent
    delegate_to: localhost

  - name: Set talosconfig endpoints
    ansible.builtin.command: "talosctl --talosconfig={{ talos_cluster_name }}/talosconfig config endpoints {% if vip_enabled and (vip_address | length) > 0 %}{{ vip_address }} {% endif %}{{ control_plane_ips | join(' ') }}"

  - name: Bootstrap the cluster
    ansible.builtin.command: "talosctl bootstrap --nodes {{ first_control_plane_ip }} --talosconfig={{ talos_cluster_name }}/talosconfig"
    notify:
      - Eject ISO and set disk boot for control plane VMs
      - Eject ISO and set disk boot for worker VMs
  
  - name: Write kubeconfig to file
    ansible.builtin.command: "talosctl kubeconfig {{ talos_cluster_name }}/kubeconfig --nodes {{ first_control_plane_ip }} --talosconfig={{ talos_cluster_name }}/talosconfig"
    changed_when: false

  - name: Switch kubeconfig to VIP after bootstrap (when enabled)
    block:
    - name: Wait for VIP API to become available
      ansible.builtin.wait_for:
        host: "{{ vip_address }}"
        port: 6443
        delay: 5
        timeout: 180
    when: vip_enabled and (vip_address | length) > 0

  - name: Flush handlers (post-bootstrap)
    ansible.builtin.meta: flush_handlers

  - name: Point kubeconfig at VIP server
    ansible.builtin.replace:
      path: "{{ talos_cluster_name }}/kubeconfig"
      regexp: "server: https://{{ first_control_plane_ip | regex_escape }}:6443"
      replace: "server: https://{{ vip_address }}:6443"
    when: vip_enabled and (vip_address | length) > 0
  when: not talosconfig_stat.stat.exists or (cluster_health is defined and cluster_health.failed)